{"ast":null,"code":"var _jsxFileName = \"/home/remon/\\uBC14\\uD0D5\\uD654\\uBA74/gcs test/TUSI GCS/TUSI GCS/tusi_gcs/src/front/Radio.js\",\n  _s = $RefreshSig$();\nimport './Frame.css';\nimport './Radio.css';\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Radio() {\n  _s();\n  const [ports, setPorts] = useState([]); // 사용 가능한 포트 목록\n  const [selectedPort, setSelectedPort] = useState(''); // 선택된 포트\n  const [baudRate, setBaudRate] = useState('9600'); // 기본 보드 속도\n\n  useEffect(() => {\n    // 사용 가능한 포트를 서버에서 가져오는 함수\n    const fetchPorts = async () => {\n      try {\n        const response = await fetch(\"/getAvaliablePorts\");\n        const data = await response.json();\n        setPorts(data.ports || []); // 포트 데이터 설정\n        if (data.ports && data.ports.length > 0) {\n          setSelectedPort(data.ports[0]); // 기본값으로 첫 번째 포트 선택\n        }\n        console.log('Available ports:', data.ports);\n      } catch (error) {\n        console.error('Error fetching available ports:', error);\n      }\n    };\n    fetchPorts();\n  }, []);\n  const handleConnect = async () => {\n    console.log('Connecting with Port:', selectedPort, 'Baud Rate:', baudRate);\n    if (!selectedPort) {\n      alert(\"Please select a port before connecting.\");\n      return;\n    }\n    try {\n      const response = await fetch('/connectPort', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          port: selectedPort,\n          baudRate: baudRate\n        })\n      });\n      const responseData = await response.json();\n      console.log('Server response:', responseData);\n      if (responseData.success) {\n        alert('Connection successful!');\n      } else {\n        alert(`Connection failed: ${responseData.message || 'Unknown error'}`);\n      }\n    } catch (error) {\n      console.error('Error during connection:', error);\n      alert('Failed to connect. Please try again.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Frame\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"FrameTitle\",\n      children: \"Radio Setting\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"PortSetting\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"settingParam\",\n        children: \"Port:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"select\", {\n          className: \"ComboBox\",\n          value: selectedPort,\n          onChange: e => setSelectedPort(e.target.value),\n          children: ports.length > 0 ? ports.map(port => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: port,\n            children: port\n          }, port, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 33\n          }, this)) : /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            disabled: true,\n            children: \"No ports available\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"settingParam\",\n        children: \"Baud Rate:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"select\", {\n          className: \"ComboBox\",\n          value: baudRate,\n          onChange: e => setBaudRate(e.target.value),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"9600\",\n            children: \"9600\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"115200\",\n            children: \"115200\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ConnectBtnDiv\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"ConnectBtn\",\n        onClick: handleConnect,\n        children: \"Connect\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 9\n  }, this);\n}\n_s(Radio, \"+6o5+EdPE0IVxyY0CDt3308Og68=\");\n_c = Radio;\nexport default Radio;\nvar _c;\n$RefreshReg$(_c, \"Radio\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","Radio","_s","ports","setPorts","selectedPort","setSelectedPort","baudRate","setBaudRate","fetchPorts","response","fetch","data","json","length","console","log","error","handleConnect","alert","method","headers","body","JSON","stringify","port","responseData","success","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","map","disabled","onClick","_c","$RefreshReg$"],"sources":["/home/remon/바탕화면/gcs test/TUSI GCS/TUSI GCS/tusi_gcs/src/front/Radio.js"],"sourcesContent":["import './Frame.css';\r\nimport './Radio.css';\r\nimport React, { useEffect, useState } from 'react';\r\n\r\nfunction Radio() {\r\n    const [ports, setPorts] = useState([]); // 사용 가능한 포트 목록\r\n    const [selectedPort, setSelectedPort] = useState(''); // 선택된 포트\r\n    const [baudRate, setBaudRate] = useState('9600'); // 기본 보드 속도\r\n\r\n    useEffect(() => {\r\n        // 사용 가능한 포트를 서버에서 가져오는 함수\r\n        const fetchPorts = async () => {\r\n            try {\r\n                const response = await fetch(\"/getAvaliablePorts\");\r\n                const data = await response.json();\r\n                setPorts(data.ports || []); // 포트 데이터 설정\r\n                if (data.ports && data.ports.length > 0) {\r\n                    setSelectedPort(data.ports[0]); // 기본값으로 첫 번째 포트 선택\r\n                }\r\n                console.log('Available ports:', data.ports);\r\n            } catch (error) {\r\n                console.error('Error fetching available ports:', error);\r\n            }\r\n        };\r\n\r\n        fetchPorts();\r\n    }, []);\r\n\r\n    const handleConnect = async () => {\r\n        console.log('Connecting with Port:', selectedPort, 'Baud Rate:', baudRate);\r\n        if (!selectedPort) {\r\n            alert(\"Please select a port before connecting.\");\r\n            return;\r\n        }\r\n        try {\r\n            const response = await fetch('/connectPort', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({ port: selectedPort, baudRate: baudRate })\r\n            });\r\n\r\n            const responseData = await response.json();\r\n            console.log('Server response:', responseData);\r\n\r\n            if (responseData.success) {\r\n                alert('Connection successful!');\r\n            } else {\r\n                alert(`Connection failed: ${responseData.message || 'Unknown error'}`);\r\n            }\r\n        } catch (error) {\r\n            console.error('Error during connection:', error);\r\n            alert('Failed to connect. Please try again.');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"Frame\">\r\n            <div className=\"FrameTitle\">Radio Setting</div>\r\n            <div className=\"PortSetting\">\r\n                <div className=\"settingParam\">Port:</div>\r\n                <div>\r\n                    <select\r\n                        className=\"ComboBox\"\r\n                        value={selectedPort}\r\n                        onChange={(e) => setSelectedPort(e.target.value)}\r\n                    >\r\n                        {ports.length > 0 ? (\r\n                            ports.map(port => (\r\n                                <option key={port} value={port}>{port}</option>\r\n                            ))\r\n                        ) : (\r\n                            <option value=\"\" disabled>No ports available</option>\r\n                        )}\r\n                    </select>\r\n                </div>\r\n                <div className=\"settingParam\">Baud Rate:</div>\r\n                <div>\r\n                    <select\r\n                        className=\"ComboBox\"\r\n                        value={baudRate}\r\n                        onChange={(e) => setBaudRate(e.target.value)}\r\n                    >\r\n                        <option value=\"9600\">9600</option>\r\n                        <option value=\"115200\">115200</option>\r\n                    </select>\r\n                </div>\r\n            </div>\r\n            <div className=\"ConnectBtnDiv\">\r\n                <button className=\"ConnectBtn\" onClick={handleConnect}>Connect</button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Radio;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}