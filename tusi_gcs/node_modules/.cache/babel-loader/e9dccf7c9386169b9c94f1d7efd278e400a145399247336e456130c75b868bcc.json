{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ehdan\\\\OneDrive\\\\\\uBB38\\uC11C\\\\\\uCE74\\uCE74\\uC624\\uD1A1 \\uBC1B\\uC740 \\uD30C\\uC77C\\\\TUSI GCS\\\\TUSI GCS\\\\tusi_gcs\\\\src\\\\front\\\\GPSInfo.js\",\n  _s = $RefreshSig$();\nimport './Frame.css';\nimport './GPSInfo.css';\nimport React, { useEffect, useState } from 'react';\nimport { GoogleMap, LoadScript, MarkerF } from '@react-google-maps/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst containerStyle = {\n  width: '100%',\n  height: '100%'\n};\nconst initialCenter = {\n  lat: 14.018000,\n  lng: 120.835941\n};\nfunction GPSInfo() {\n  _s();\n  const [location, setLocation] = useState(initialCenter);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch('/location'); // 서버의 위치 정보 API 엔드포인트\n        const responseData = await response.json();\n        console.log('Location data from server:', responseData);\n\n        // 서버에서 위치 데이터를 받아오고 상태를 업데이트합니다.\n        if (responseData && responseData.location) {\n          const {\n            lat,\n            lng\n          } = responseData.location; // 위치 데이터의 구조에 따라 조정\n          setLocation({\n            lat,\n            lng\n          });\n        }\n      } catch (error) {\n        console.error('Error fetching location data:', error);\n      }\n    };\n\n    // 초기 로딩 시 데이터 가져오기\n    fetchData();\n\n    // 1초마다 데이터를 가져오도록 설정\n    const interval = setInterval(fetchData, 1000); // 1000ms = 1초\n\n    // 컴포넌트가 언마운트 될 때 clearInterval로 interval 정리\n    return () => clearInterval(interval);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Frame\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"FrameTitle\",\n      children: \"GPS Info\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"GPSInformation\",\n      children: /*#__PURE__*/_jsxDEV(LoadScript, {\n        googleMapsApiKey: \"AIzaSyAPYI0P79F58m0M5jvC8LjObBqI9tibAGo\",\n        children: /*#__PURE__*/_jsxDEV(GoogleMap, {\n          mapContainerStyle: containerStyle,\n          center: location,\n          zoom: 17,\n          children: /*#__PURE__*/_jsxDEV(MarkerF, {\n            position: location\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 9\n  }, this);\n}\n_s(GPSInfo, \"VcOmz4iQJ94t1lngrrS+bRdBnu0=\");\n_c = GPSInfo;\nexport default GPSInfo;\nvar _c;\n$RefreshReg$(_c, \"GPSInfo\");","map":{"version":3,"names":["React","useEffect","useState","GoogleMap","LoadScript","MarkerF","jsxDEV","_jsxDEV","containerStyle","width","height","initialCenter","lat","lng","GPSInfo","_s","location","setLocation","fetchData","response","fetch","responseData","json","console","log","error","interval","setInterval","clearInterval","className","children","fileName","_jsxFileName","lineNumber","columnNumber","googleMapsApiKey","mapContainerStyle","center","zoom","position","_c","$RefreshReg$"],"sources":["C:/Users/ehdan/OneDrive/문서/카카오톡 받은 파일/TUSI GCS/TUSI GCS/tusi_gcs/src/front/GPSInfo.js"],"sourcesContent":["import './Frame.css';\r\nimport './GPSInfo.css';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { GoogleMap, LoadScript, MarkerF } from '@react-google-maps/api';\r\n\r\nconst containerStyle = {\r\n    width: '100%',\r\n    height: '100%'\r\n};\r\n\r\nconst initialCenter = {\r\n    lat: 14.018000,\r\n    lng: 120.835941\r\n};\r\n\r\nfunction GPSInfo() {\r\n    const [location, setLocation] = useState(initialCenter);\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                const response = await fetch('/location'); // 서버의 위치 정보 API 엔드포인트\r\n                const responseData = await response.json();\r\n                console.log('Location data from server:', responseData);\r\n\r\n                // 서버에서 위치 데이터를 받아오고 상태를 업데이트합니다.\r\n                if (responseData && responseData.location) {\r\n                    const { lat, lng } = responseData.location; // 위치 데이터의 구조에 따라 조정\r\n                    setLocation({ lat, lng });\r\n                }\r\n            } catch (error) {\r\n                console.error('Error fetching location data:', error);\r\n            }\r\n        };\r\n\r\n        // 초기 로딩 시 데이터 가져오기\r\n        fetchData();\r\n\r\n        // 1초마다 데이터를 가져오도록 설정\r\n        const interval = setInterval(fetchData, 1000); // 1000ms = 1초\r\n\r\n        // 컴포넌트가 언마운트 될 때 clearInterval로 interval 정리\r\n        return () => clearInterval(interval);\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"Frame\">\r\n            <div className=\"FrameTitle\">GPS Info</div>\r\n            <div className=\"GPSInformation\">\r\n                <LoadScript googleMapsApiKey=\"AIzaSyAPYI0P79F58m0M5jvC8LjObBqI9tibAGo\">\r\n                    <GoogleMap mapContainerStyle={containerStyle} center={location} zoom={17}>\r\n                        {/* 마커가 위치에 따라 정상적으로 렌더링되도록 ensure your location is correctly formatted */}\r\n                        <MarkerF position={location} />\r\n                    </GoogleMap>\r\n                </LoadScript>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default GPSInfo;\r\n"],"mappings":";;AAAA,OAAO,aAAa;AACpB,OAAO,eAAe;AACtB,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,SAAS,EAAEC,UAAU,EAAEC,OAAO,QAAQ,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExE,MAAMC,cAAc,GAAG;EACnBC,KAAK,EAAE,MAAM;EACbC,MAAM,EAAE;AACZ,CAAC;AAED,MAAMC,aAAa,GAAG;EAClBC,GAAG,EAAE,SAAS;EACdC,GAAG,EAAE;AACT,CAAC;AAED,SAASC,OAAOA,CAAA,EAAG;EAAAC,EAAA;EACf,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGf,QAAQ,CAACS,aAAa,CAAC;EAEvDV,SAAS,CAAC,MAAM;IACZ,MAAMiB,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC1B,IAAI;QACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,WAAW,CAAC,CAAC,CAAC;QAC3C,MAAMC,YAAY,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;QAC1CC,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAEH,YAAY,CAAC;;QAEvD;QACA,IAAIA,YAAY,IAAIA,YAAY,CAACL,QAAQ,EAAE;UACvC,MAAM;YAAEJ,GAAG;YAAEC;UAAI,CAAC,GAAGQ,YAAY,CAACL,QAAQ,CAAC,CAAC;UAC5CC,WAAW,CAAC;YAAEL,GAAG;YAAEC;UAAI,CAAC,CAAC;QAC7B;MACJ,CAAC,CAAC,OAAOY,KAAK,EAAE;QACZF,OAAO,CAACE,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;MACzD;IACJ,CAAC;;IAED;IACAP,SAAS,CAAC,CAAC;;IAEX;IACA,MAAMQ,QAAQ,GAAGC,WAAW,CAACT,SAAS,EAAE,IAAI,CAAC,CAAC,CAAC;;IAE/C;IACA,OAAO,MAAMU,aAAa,CAACF,QAAQ,CAAC;EACxC,CAAC,EAAE,EAAE,CAAC;EAEN,oBACInB,OAAA;IAAKsB,SAAS,EAAC,OAAO;IAAAC,QAAA,gBAClBvB,OAAA;MAAKsB,SAAS,EAAC,YAAY;MAAAC,QAAA,EAAC;IAAQ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eAC1C3B,OAAA;MAAKsB,SAAS,EAAC,gBAAgB;MAAAC,QAAA,eAC3BvB,OAAA,CAACH,UAAU;QAAC+B,gBAAgB,EAAC,yCAAyC;QAAAL,QAAA,eAClEvB,OAAA,CAACJ,SAAS;UAACiC,iBAAiB,EAAE5B,cAAe;UAAC6B,MAAM,EAAErB,QAAS;UAACsB,IAAI,EAAE,EAAG;UAAAR,QAAA,eAErEvB,OAAA,CAACF,OAAO;YAACkC,QAAQ,EAAEvB;UAAS;YAAAe,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACxB;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACJ;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACZ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd;AAACnB,EAAA,CA3CQD,OAAO;AAAA0B,EAAA,GAAP1B,OAAO;AA6ChB,eAAeA,OAAO;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}